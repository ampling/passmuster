#!/usr/bin/env bash

##
## A consistent pass entry multi selection menu.
##
## [Ampling] [2016-2017]
##

## DEPENDENCIES;  dmenu, pass
## (optional)	  libnotify, xdotool

shopt -s nullglob globstar failglob
set -euo pipefail

## SETTINGS
X_SELECTION=${PASSWORD_STORE_X_SELECTION:-clipboard}
prefix=${PASSWORD_STORE_DIR:-$HOME/.password-store}
version=passmuster-0.4.0

arg1=${1:-}
arg2=${2:-}
password_files=( "$prefix"/**/*.gpg )
password_files=( "${password_files[@]#$prefix/}" )
password_files=( "${password_files[@]%.gpg}" )
cleanup=False
selection=''
before=''
myname=${0##*/}
userID=$(id -u "$(whoami)")
usage="$myname [-h help] [-k kill] [-v version] [-c clip] [-q quiet] [-- dmenu]"


## Try libnotify first.
{ hash notify-send &>/dev/null && notifyit=0; } ||
{ printf '%s\n' "w: libnotify not found" && notifyit=1; }


_notify () {
  message=$1
  [[ $notifyit -eq 0 ]] && notify-send "$message" --icon=dialog-password
  [[ $notifyit -le 1 ]] && printf '%s\n' "$message"
}

_clear () {
  ## Removes old filelock(s).
  umask 077
  stalelock=${stalelock:-''}
  stalelock=$(find /tmp -maxdepth 1 -name "$myname.$userID.*" -user "$(whoami)" -print -quit -type d) &&
  if [[ -n "$stalelock" ]]; then
    stalename=${stalelock%.*}
    report=$(pgrep -fa "$myname" | grep bash | sed 's/\s.*$//')
    stalePID=$(printf '%s' "$stalename" | sed -e "s/\/tmp\/$myname\.[0-9]\{1,6\}\?\..*\.//g")
    parentID=$(ps -o pid= --ppid "$stalePID" )
    if [[ $report == *"$stalePID"* ]]; then
      kill "$parentID" &>/dev/null || exit 1
    else
      rmdir /tmp/passmuster."$userID".* &>/dev/null ||
      { _notify "e: Unable to clear old filelock"; exit 1; }
    fi
  fi
}

_finish () {
  [[ $cleanup == True ]] &&
  printf '%s' "$before" | base64 -d | xclip -sel "$X_SELECTION" -i &>/dev/null &&
  compgen -G /tmp/passmuster."$userID"* &>/dev/null &&
  rmdir /tmp/passmuster.*.*."$$".lock &>/dev/null
  exit
}


hash xclip &>/dev/null || { _notify "e: xclip not found. Please install xclip."; exit; }
{ hash xdotool &>/dev/null && clipit=0; } || { _notify "w: xdotool not found."; clipit=0; }
## Check for a qupzilla bug which triggers unwanted x-selection events.
pgrep -fa 'qupzilla' &>/dev/null && _notify "w: conflicts with qupzilla"

[[ $arg1 == *v* || $arg2 == *v* ]] && { _notify "$version" && exit; }
[[ $arg1 == *h* || $arg2 == *h* ]] && { printf '%s\n' "$usage" && exit; }
[[ $arg1 == *k* || $arg2 == *k* ]] && { _notify "clean and exit."; _clear; exit; }
[[ $arg1 == *c* || $arg2 == *c* ]] && { clipit=1 && shift; }
{ [[ $arg1 == *qq* || $arg2 == *qq* ]] && { notifyit=2 && shift; } } ||
{ [[ $arg1 == *q* || $arg2 == *q* ]] && { notifyit=1 && shift; } }
[[ ! -e "$prefix" ]] && { _notify "e: $prefix not found." && exit; }

## Runs the _finish funtion on exit.
trap _finish EXIT

## dmenu exits on KeyPress not KeyRelease.
## It might be nice to send KeyRelease event to dummy window.
for selection in $(printf '%s\n' "${password_files[@]}" | dmenu -f "$@"); do
  passel+=("$selection")
done

_clear; [[ -n $selection ]] || exit

## Add new filelock
( mktemp -d "/tmp/passmuster.$userID.XXXXXXXXXX.$$.lock" &>/dev/null ||
{ _notify "e: Unable to make filelock."; exit 1; } )

## It would be nice to first test if X-selection is null.
before=$(xclip -sel "$X_SELECTION" -o | base64) || true
cleanup=True
round=0


if [[ $clipit -eq 0 ]]; then
  for entry in "${passel[@]}"; do
    ## AUTOTYPE
    {
    printf '' | xclip -l 1 -quiet -sel "$X_SELECTION" &>/dev/null
    pass show "$entry" | sed '1!d' | tr -d '\n' |
    xdotool type --delay --clearmodifiers --file -
    }
    _notify "${passel[$round]} sent via autotype"
    round=$((round + 1))
  done
else
  for entry in "${passel[@]}"; do
    ## CLIPBOARD
    {
    pass show "$entry" | sed '1!d' | tr -d '\n' |
    xclip -l 1 -quiet -sel "$X_SELECTION" &>/dev/null
    }
    _notify "${passel[$round]} sent via $X_SELECTION"
    round=$((round + 1))
  done
fi
exit
