#!/usr/bin/env bash

##
## A consistent pass entry multi selection menu.
##

## [2014-2016]  [Jason A. Donenfeld]
## [2016-2017]  [Ampling]

## DEPENDENCIES;  pass, dmenu, xclip
## (optional)     libnotify, xdotool

shopt -s nullglob globstar failglob
set -euo pipefail

manager=${PASSWORD_MANAGER:-pass}
X_SELECTION=${PASSWORD_STORE_X_SELECTION:-clipboard}
prefix=${PASSWORD_STORE_DIR:-$HOME/.password-store}
version=passmuster-0.4.10

arg1=${1:-}
arg2=${2:-}
password_files=( "$prefix"/**/*.gpg )
password_files=( "${password_files[@]#$prefix/}" )
[[ $manager == pass ]] &&
password_files=( "${password_files[@]%.gpg}" )
cleanup=False
selection=''
before=''
myname=${0##*/}
userID=$(id -u "$(whoami)")
usage="$myname [help] [kill] [version] [clip] [quiet] [dmenu...]"


## Check for optional dependency, libnotify.
{ hash notify-send &>/dev/null && notifyit=0 ;} ||
{ printf '%s\n' "w: libnotify not found" && notifyit=1 ;}


_notify () {
  message=$1
  [[ $notifyit -eq 0 ]] && notify-send "$message" --icon=dialog-password
  [[ $notifyit -le 1 ]] && printf '%s\n' "$message"
}

_clear () {
  ## Removes old filelock(s).
  umask 077
  stalelock=${stalelock:-''}
  stalelock=$(find /tmp -maxdepth 1 -name "$myname.$userID.*" -user "$(whoami)" -print -quit -type d) &&
  if [[ -n "$stalelock" ]]; then
    stalename=${stalelock%.*}
    report=$(pgrep -fa "$myname" | grep bash | sed 's/\s.*$//')
    stalePID=$(printf '%s' "$stalename" | sed -e "s/\/tmp\/$myname\.[0-9]\{1,6\}\?\..*\.//g")
    parentID=$(ps -o pid= --ppid "$stalePID" )
    [[ $report == *"$stalePID"* ]] && {
    { kill "$parentID" &>/dev/null || exit 1 ;} || 
    { rmdir /tmp/passmuster."$userID".* &>/dev/null || 
    { _notify "e: Unable to clear old filelock"; exit 1 ;} ;} ;}
  fi
}

_finish () {
  [[ $cleanup == True ]] &&
  printf '%s' "$before" | base64 -d | xclip -sel "$X_SELECTION" -i &>/dev/null &&
  compgen -G /tmp/passmuster."$userID"* &>/dev/null &&
  rmdir /tmp/passmuster.*.*."$$".lock &>/dev/null
  exit
}


hash xclip &>/dev/null || { _notify "e: xclip not found. Please install xclip."; exit ;}
{ hash xdotool &>/dev/null && clipit=0 ;} || { _notify "w: xdotool not found."; clipit=0 ;}
## Check for unwanted x-selection events caused by Qupzilla issue.
pgrep -fa 'qupzilla' &>/dev/null && _notify "w: qupzilla is known to break our xclip loop."
[[ ! -e "$prefix" ]] && { _notify "e: $prefix not found." && exit ;}

[[ $arg1 == *v* || $arg2 == *v* ]] && { _notify "$version" && exit ;}
[[ $arg1 == *h* || $arg2 == *h* ]] && { printf '%s\n' "$usage" && exit ;}
[[ $arg1 == *k* || $arg2 == *k* ]] && { _notify "clean and exit."; _clear; exit ;}
[[ $arg1 == *c* || $arg2 == *c* ]] && { clipit=1 && shift ;}
{
[[ $arg1 == *qq* || $arg2 == *qq* ]] && { notifyit=2 && shift ;} ;} || {
[[ $arg1 == *q* || $arg2 == *q* ]] && { notifyit=1 && shift ;}
}

## Runs the _finish funtion on exit.
trap _finish EXIT

## dmenu exits on KeyPress not KeyRelease. Effects roundcube issue.
## (It might be nice to send KeyRelease event to some dummy window.) 
for selection in $(printf '%s\n' "${password_files[@]}" | dmenu -f "$@"); do
  passel+=("$selection")
done

_clear; [[ -n $selection ]] || exit

## Add filelock
( mktemp -d "/tmp/passmuster.$userID.XXXXXXXXXX.$$.lock" &>/dev/null ||
{ _notify "e: Unable to make filelock."; exit 1 ;} )

## Avoid setting bash variables to null.
before=$(xclip -sel "$X_SELECTION" -o | base64) || true
cleanup=True
round=0


[[ $clipit -eq 0 ]] && {
## AUTOTYPE
for entry in "${passel[@]}"; do
  printf '' | xclip -l 1 -quiet -sel "$X_SELECTION" &>/dev/null
  $manager "$entry" | sed '1!d' | tr -d '\n' |
  xdotool type --delay --clearmodifiers --file -
  _notify "${passel[$round]} sent via autotype"
  round=$((round + 1))
done
}
[[ $clipit -eq 1 ]] && {
## CLIPBOARD
for entry in "${passel[@]}"; do
  $manager "$entry" | sed '1!d' | tr -d '\n' |
  xclip -l 1 -quiet -sel "$X_SELECTION" &>/dev/null
  _notify "${passel[$round]} sent via $X_SELECTION"
  round=$((round + 1))
done
}

exit
